generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Portfolio Owner Profile
model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  email       String   @unique
  name        String
  title       String
  bio         String?
  phone       String?
  location    String?
  githubUrl   String?
  linkedinUrl String?
  resumeUrl   String?
  avatarUrl   String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model AdminUser {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  username     String         @unique
  email        String         @unique
  passwordHash String
  role         String         @default("admin") // "super_admin", "admin", "editor"
  isActive     Boolean        @default(true)
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  AdminSession AdminSession[]

  @@map("admin_users")
}

model AdminSession {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  token     String   @unique
  expiresAt DateTime
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())

  user AdminUser @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_sessions")
}

// Skills with categories and proficiency
model Skill {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  category    String // "Frontend", "Backend", "Tools", etc.
  years       Int      @default(1)
  proficiency Int      @default(50) // 0-100
  description String?
  icon        String? // Icon name or URL
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("skills")
}

// Projects with rich metadata
model Project {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String        @unique
  description     String
  longDescription String?
  technologies    String[] // Array of tech stack
  imageUrl        String?
  demoUrl         String?
  githubUrl       String?
  status          String        @default("completed") // "in-progress", "completed", "archived"
  featured        Boolean       @default(false)
  isActive        Boolean       @default(true)
  order           Int           @default(0)
  startDate       DateTime?
  endDate         DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  projectViews    ProjectView[]

  @@map("projects")
}

// Work Experience
model Experience {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  company      String
  location     String?
  type         String    @default("full-time") // "full-time", "part-time", "freelance", "contract"
  description  String
  achievements String[] // Array of key achievements
  technologies String[] // Tech stack used
  startDate    DateTime
  endDate      DateTime?
  isCurrent    Boolean   @default(false)
  isActive     Boolean   @default(true)
  order        Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("experiences")
}

// Blog Posts
model BlogPost {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  excerpt     String
  content     String
  coverImage  String?
  tags        String[] // Array of tags
  isPublished Boolean    @default(false)
  isFeatured  Boolean    @default(false)
  views       Int        @default(0)
  readTime    Int? // Estimated read time in minutes
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blogViews   BlogView[]

  @@map("blog_posts")
}

// Contact Form Submissions
model ContactSubmission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  message   String
  ip        String?
  userAgent String?
  status    String   @default("new") // "new", "read", "replied"
  isSpam    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}

// Site Settings/Configuration
model SiteConfig {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  key         String   @unique
  value       String
  type        String   @default("string") // "string", "number", "boolean", "json"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_config")
}

// Visitor Analytics (your existing model)
model Visitor {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  ip           String        @unique
  visits       Int           @default(1)
  country      String?
  region       String?
  city         String?
  userAgent    String?
  referrer     String?
  lastVisit    DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  pageViews    PageView[]
  projectViews ProjectView[]
  blogViews    BlogView[]

  @@map("visitors")
}

// Enhanced Prisma Schema - Add these models to your existing schema
model PageView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  visitorId String?  @db.ObjectId
  ip        String
  page      String // "/", "/projects", "/blog/slug", etc.
  title     String? // Page title
  referrer  String? // Where they came from
  userAgent String?
  device    String? // "Desktop", "Mobile", "Tablet"
  browser   String? // "Chrome", "Safari", "Firefox"
  country   String?
  region    String?
  city      String?
  duration  Int? // Time spent on page in seconds
  timestamp DateTime @default(now())

  visitor Visitor? @relation(fields: [visitorId], references: [id])

  @@index([timestamp])
  @@index([page])
  @@index([ip])
  @@map("page_views")
}

model ProjectView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  visitorId String?  @db.ObjectId
  ip        String
  userAgent String?
  referrer  String?
  timestamp DateTime @default(now())

  project Project  @relation(fields: [projectId], references: [id])
  visitor Visitor? @relation(fields: [visitorId], references: [id])

  @@index([projectId])
  @@index([timestamp])
  @@map("project_views")
}

model BlogView {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  visitorId String?  @db.ObjectId
  ip        String
  userAgent String?
  referrer  String?
  readTime  Int? // Estimated read time in seconds
  timestamp DateTime @default(now())

  post    BlogPost @relation(fields: [postId], references: [id])
  visitor Visitor? @relation(fields: [visitorId], references: [id])

  @@index([postId])
  @@index([timestamp])
  @@map("blog_views")
}
